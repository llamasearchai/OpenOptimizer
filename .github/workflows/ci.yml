name: OpenOptimizer CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build_and_test:
    name: Build & Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11', '3.12']
        # CUDA, MLIR, TVM setup is complex for CI, focusing on core build first
        # Add specific build configurations later if needed, e.g.:
        # include:
        #   - os: ubuntu-latest
        #     python-version: '3.11'
        #     cmake-options: -DOPENOPTIMIZER_WITH_CUDA=ON # (Requires self-hosted runner or complex setup)

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest # Ensure pytest is installed for running tests

    # C++ Build Steps (simplified for now, assuming system compilers and CMake)
    # For full dependency matrix (MLIR, TVM, spdlog, Qt), this would need more setup
    # e.g., installing them via package managers or from source, which can be time-consuming
    - name: Configure CMake (C++ components)
      # For Windows, specify generator, e.g. -G "Visual Studio 17 2022"
      # For simplicity, this assumes default generators work or CMake finds a suitable one.
      run: |
        cmake -B build -S . -DOPENOPTIMIZER_BUILD_TESTS=ON -DOPENOPTIMIZER_WITH_QT_GUI=OFF
      env:
        CMAKE_BUILD_PARALLEL_LEVEL: 2 # Speed up builds

    - name: Build C++ components
      run: cmake --build build --config Release --parallel 2

    - name: Run C++ Tests (CTest)
      if: runner.os != 'Windows-latest' # CTest might behave differently or not be set up well on Windows by default
      working-directory: ./build
      run: ctest -C Release --output-on-failure

    - name: Run Python Tests (pytest)
      run: pytest tests/python # Assuming python tests are in tests/python

    # Example of artifact upload (optional)
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: build-artifacts-${{ matrix.os }}-py${{ matrix.python-version }}
    #     path: |
    #       build/
    #       # Add other artifacts like .whl if generated by setup.py build_bdist_wheel

  # Optional: Linting job
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        pip install ruff black # Add other tools like cppcheck, clang-format if desired

    - name: Run Ruff Linter (Python)
      run: ruff check .

    - name: Run Black Formatter Check (Python)
      run: black --check .

    # Add C++ linting/formatting here if desired
    # - name: Install C++ Linters (e.g., cppcheck, clang-tidy, clang-format)
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y cppcheck clang-tidy clang-format
    # - name: Run cppcheck
    #   run: cppcheck --enable=all --std=c++20 --project=build/compile_commands.json . # Needs compile_commands.json
    # - name: Run clang-tidy
    #   run: clang-tidy -p build --checks=*,-llvm-header-guard --header-filter=.* $(find frontend ir optimization codegen -name '*.cpp' -o -name '*.hpp')
    # - name: Run clang-format check
    #   run: find frontend ir optimization codegen -name '*.cpp' -o -name '*.hpp' | xargs clang-format --Werror --dry-run

  build_docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme # Add other Sphinx extensions
        sudo apt-get update && sudo apt-get install -y doxygen graphviz # For Doxygen
    - name: Build Python Docs (Sphinx)
      run: |
        mkdir -p docs/python/source
        mkdir -p docs/python/build/html
        echo "Building Python documentation placeholder..."
        # If docs are not yet set up, this will be a placeholder
    - name: Build C++ Docs (Doxygen)
      # This assumes Doxyfile is configured and CMake can trigger it or run directly
      run: |
        mkdir -p docs/cpp
        echo "Building C++ documentation placeholder..."
        # If Doxyfile is not available yet, this is a placeholder
    - name: Upload Documentation Artifact
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          docs/python/build/html/
          docs/cpp/build/html/ # Adjust if Doxygen output path is different

  package:
    needs: build_and_test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload package
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs: [build_and_test, lint, package]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Download package artifact
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Configure Git
      run: |
        git config --global user.name "OpenOptimizer CI"
        git config --global user.email "ci@openoptimizer.org"
    
    - name: Push to PyPI (if on main)
      if: github.ref == 'refs/heads/main'
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        pip install twine
        twine upload --skip-existing dist/*
      continue-on-error: true # Don't fail the workflow if PyPI upload fails
    
    - name: Push to GitHub Packages (all branches)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Preparing to publish to GitHub Packages"
        # This is a placeholder for when GitHub Packages integration is set up
        # pip install twine
        # twine upload --repository-url https://maven.pkg.github.com/openoptimizer/openoptimizer dist/*